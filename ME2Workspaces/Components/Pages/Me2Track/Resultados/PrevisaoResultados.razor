@page "/previsao-resultados"
@rendermode InteractiveServer
@using Microsoft.ML
@using Microsoft.ML.Data
@using Microsoft.ML.Trainers
@using MudBlazor
@inject ISnackbar Snackbar
@using ME2Workspaces.Components.Pages.Me2Track.Campanhas.Me2TrackCampanha
@using ME2Workspaces.Components.Pages.Me2Track.Influenciadores.Tarefas
@using ME2Workspaces.Components.Pages.Me2Track.Insight_Influenciadores
@using Me2Workspaces.ModulosME2.Influencer.InfluencerFormService
@using Me2Workspaces.ModulosME2.Me2InstagramCheck
@using ME2Workspaces.Components.Pages.Me2Track.Influenciadores
@using Me2Workspaces.ModulosME2.CampanhaService.Me2Campanha

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Class="mb-4">Previsão de Resultados (ML)</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                <MudTabPanel Text="Previsões" Icon="@Icons.Material.Filled.Timeline">
                    <!-- Filtros -->
                    <MudPaper Class="pa-4 mb-4">
                        <MudGrid>
                            <MudItem xs="12" sm="3">
                                <MudSelect T="Me2CampanhaModelo" Label="Campanha"
                                           ValueChanged="@OnCampanhaSelected"
                                           Value="@selectedCampanha">
                                    <MudSelectItem T="Me2CampanhaModelo" Value="@null">Todas as Campanhas</MudSelectItem>
                                    @foreach (var campanha in campanhas)
                                    {
                                        <MudSelectItem Value="@campanha">@campanha.NomeCampanha</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <MudSelect T="InfluencerModel" Label="Influenciador"
                                           ValueChanged="@OnInfluencerSelected"
                                           Value="@selectedInfluencer"
                                           Disabled="@(selectedCampanha == null)">
                                    <MudSelectItem T="InfluencerModel" Value="@null">Todos os Influenciadores</MudSelectItem>
                                    @foreach (var influencer in influencers)
                                    {
                                        <MudSelectItem Value="@influencer">@influencer.Nome</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <MudSelect T="TipoRedeSocial?" Label="Rede Social"
                                           ValueChanged="@OnRedeSocialSelected"
                                           Value="@selectedRedeSocial">
                                    <MudSelectItem Value="@((TipoRedeSocial?)null)">Todas as Redes</MudSelectItem>
                                    @foreach (var rede in Enum.GetValues<TipoRedeSocial>())
                                    {
                                        <MudSelectItem Value="@((TipoRedeSocial?)rede)">@rede.ToString()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <MudNumericField @bind-Value="@diasPrevisao"
                                                 Label="Dias para Previsão"
                                                 Min="1" Max="90" />
                            </MudItem>
                        </MudGrid>
                    </MudPaper>

                    <!-- KPI Cards com Previsões -->
                    <MudGrid Class="mb-4">
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-4" Style="height: 120px; background: linear-gradient(45deg, #6a1b9a, #4a148c);">
                                <MudText Typo="Typo.subtitle1" Class="mb-2" Style="color: white;">Previsão de Visualizações</MudText>
                                <MudText Typo="Typo.h4" Style="color: #e1bee7;">@previsaoVisualizacoes.ToString("N0")</MudText>
                                <MudText Typo="Typo.caption" Style="color: white;">
                                    Confiança: @(confiancaVisualizacoes.ToString("P1"))
                                </MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-4" Style="height: 120px; background: linear-gradient(45deg, #6a1b9a, #4a148c);">
                                <MudText Typo="Typo.subtitle1" Class="mb-2" Style="color: white;">Previsão de Engajamento</MudText>
                                <MudText Typo="Typo.h4" Style="color: #e1bee7;">@previsaoEngajamento.ToString("P2")</MudText>
                                <MudText Typo="Typo.caption" Style="color: white;">
                                    Confiança: @(confiancaEngajamento.ToString("P1"))
                                </MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-4" Style="height: 120px; background: linear-gradient(45deg, #6a1b9a, #4a148c);">
                                <MudText Typo="Typo.subtitle1" Class="mb-2" Style="color: white;">Previsão de Conversões</MudText>
                                <MudText Typo="Typo.h4" Style="color: #e1bee7;">@previsaoConversoes.ToString("N0")</MudText>
                                <MudText Typo="Typo.caption" Style="color: white;">
                                    Confiança: @(confiancaConversoes.ToString("P1"))
                                </MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-4" Style="height: 120px; background: linear-gradient(45deg, #6a1b9a, #4a148c);">
                                <MudText Typo="Typo.subtitle1" Class="mb-2" Style="color: white;">ROI Previsto</MudText>
                                <MudText Typo="Typo.h4" Style="color: #e1bee7;">@roiPrevisto.ToString("P2")</MudText>
                                <MudText Typo="Typo.caption" Style="color: white;">
                                    Confiança: @(confiancaROI.ToString("P1"))
                                </MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                    <!-- Gráficos de Previsão -->
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudPaper Class="pa-4">
                                <MudChart ChartType="ChartType.Line"
                                          ChartSeries="@seriesPrevisaoEngajamento"
                                          XAxisLabels="@labelsPrevisao"
                                          Width="100%" Height="300px" />
                                <MudText Typo="Typo.subtitle1" Align="Align.Center">Previsão de Engajamento</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudPaper Class="pa-4">
                                <MudChart ChartType="ChartType.Line"
                                          ChartSeries="@seriesPrevisaoVisualizacoes"
                                          XAxisLabels="@labelsPrevisao"
                                          Width="100%" Height="300px" />
                                <MudText Typo="Typo.subtitle1" Align="Align.Center">Previsão de Visualizações</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                    <!-- Tabela de Previsões Detalhadas -->
                    <MudPaper Class="pa-4 mt-4">
                        <MudTable Items="@previsoesDetalhadas" Dense="true" Hover="true" Bordered="true">
                            <HeaderContent>
                                <MudTh>Período</MudTh>
                                <MudTh>Métrica</MudTh>
                                <MudTh>Valor Previsto</MudTh>
                                <MudTh>Intervalo de Confiança</MudTh>
                                <MudTh>Tendência</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Periodo</MudTd>
                                <MudTd>@context.Metrica</MudTd>
                                <MudTd>@context.ValorPrevisto</MudTd>
                                <MudTd>@context.IntervaloConfianca</MudTd>
                                <MudTd>
                                    <MudIcon Icon="@(context.Tendencia > 0 ? Icons.Material.Filled.TrendingUp : Icons.Material.Filled.TrendingDown)"
                                             Color="@(context.Tendencia > 0 ? Color.Success : Color.Error)" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </MudTabPanel>

                <MudTabPanel Text="Configurações ML" Icon="@Icons.Material.Filled.Settings">
                    <MudPaper Class="pa-4">
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudSelect T="string" Label="Algoritmo de ML"
                                           @bind-Value="@selectedAlgoritmo">
                                    <MudSelectItem Value="@("fastforest")">Fast Forest</MudSelectItem>
                                    <MudSelectItem Value="@("fasttree")">Fast Tree</MudSelectItem>
                                    <MudSelectItem Value="@("lightgbm")">LightGBM</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudNumericField @bind-Value="@janelaTreinamento"
                                                 Label="Janela de Treinamento (dias)"
                                                 Min="30" Max="365" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           OnClick="@TreinarModelo"
                                           Class="mt-4">
                                    Treinar Modelo Novamente
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Me2CampanhaModelo> campanhas = new();
    private List<InfluencerModel> influencers = new();
    private List<Insight> historicalInsights = new();
    private Me2CampanhaModelo selectedCampanha;
    private InfluencerModel selectedInfluencer;
    private TipoRedeSocial? selectedRedeSocial;
    private string selectedAlgoritmo = "fastforest";
    private int janelaTreinamento = 90;
    private int diasPrevisao = 30;

    // ML.NET context and models
    private MLContext mlContext;
    private ITransformer modeloVisualizacoes;
    private ITransformer modeloEngajamento;
    private ITransformer modeloConversoes;

    // Prediction metrics
    private double previsaoVisualizacoes;
    private double previsaoEngajamento;
    private double previsaoConversoes;
    private double roiPrevisto;

    // Confidence levels
    private double confiancaVisualizacoes;
    private double confiancaEngajamento;
    private double confiancaConversoes;
    private double confiancaROI;

    // Chart data
    private List<ChartSeries> seriesPrevisaoEngajamento = new();
    private List<ChartSeries> seriesPrevisaoVisualizacoes = new();
    private string[] labelsPrevisao = new string[] { };
    private List<PrevisaoDetalhada> previsoesDetalhadas = new();

    public class DadosTreinamento
    {
        [LoadColumn(0)]
        public float Visualizacoes { get; set; }

        [LoadColumn(1)]
        public float Interacoes { get; set; }

        [LoadColumn(2)]
        public float ContasAlcancadas { get; set; }

        [LoadColumn(3)]
        public float ContasComEngajamento { get; set; }

        [LoadColumn(4)]
        public string AtividadeDoPerfil { get; set; }
    }

    private class PrevisaoML
    {
        [ColumnName("Score")]
        public float Previsao { get; set; }
    }

    private class PrevisaoDetalhada
    {
        public string Periodo { get; set; }
        public string Metrica { get; set; }
        public string ValorPrevisto { get; set; }
        public string IntervaloConfianca { get; set; }
        public double Tendencia { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        mlContext = new MLContext(seed: 1);
        await VerificarLogin();
        await CarregarDados();
        await InicializarModelos();
    }

    private IEstimator<ITransformer> GetTrainer(MLContext mlContext, string algoritmo)
    {
        var options = new SdcaRegressionTrainer.Options
        {
            LabelColumnName = "Label",
            FeatureColumnName = "Features",
            MaximumNumberOfIterations = 100,
            L2Regularization = 0.01f
        };

        return algoritmo switch
        {
            "fastforest" => mlContext.Regression.Trainers.Sdca(options),
            "fasttree" => mlContext.Regression.Trainers.Sdca(),
            "lightgbm" => mlContext.Regression.Trainers.Sdca(),
            _ => mlContext.Regression.Trainers.Sdca(options)
        };
    }

    private async Task InicializarModelos()
    {
        try
        {
            var dadosTreinamento = await CarregarDadosTreinamento();

            if (!dadosTreinamento.Any())
            {
                Snackbar.Add("Não há dados suficientes para treinar o modelo", Severity.Warning);
                return;
            }

            // Convert insights to training data
            var trainingData = dadosTreinamento.Select(i => new DadosTreinamento
            {
                Visualizacoes = i.Visualizacoes,
                Interacoes = i.Interacoes,
                ContasAlcancadas = i.ContasAlcancadas,
                ContasComEngajamento = i.ContasComEngajamento,
                AtividadeDoPerfil = i.AtividadeDoPerfil.ToString()
            }).ToList();

            var trainingDataView = mlContext.Data.LoadFromEnumerable(trainingData);

            // Pipeline for visualizations
            var pipelineVisualizacoes = mlContext.Transforms.CopyColumns(outputColumnName: "Label", inputColumnName: nameof(DadosTreinamento.Visualizacoes))
                .Append(mlContext.Transforms.Categorical.OneHotEncoding(outputColumnName: "AtividadeEncoded", inputColumnName: nameof(DadosTreinamento.AtividadeDoPerfil)))
                .Append(mlContext.Transforms.Concatenate("Features",
                    nameof(DadosTreinamento.Interacoes),
                    nameof(DadosTreinamento.ContasAlcancadas),
                    nameof(DadosTreinamento.ContasComEngajamento),
                    "AtividadeEncoded"))
                .Append(GetTrainer(mlContext, selectedAlgoritmo));

            modeloVisualizacoes = pipelineVisualizacoes.Fit(trainingDataView);

            // Pipeline for engagement
            var pipelineEngajamento = mlContext.Transforms.CopyColumns(outputColumnName: "Label", inputColumnName: nameof(DadosTreinamento.ContasComEngajamento))
                .Append(mlContext.Transforms.Categorical.OneHotEncoding(outputColumnName: "AtividadeEncoded", inputColumnName: nameof(DadosTreinamento.AtividadeDoPerfil)))
                .Append(mlContext.Transforms.Concatenate("Features",
                    nameof(DadosTreinamento.Visualizacoes),
                    nameof(DadosTreinamento.Interacoes),
                    nameof(DadosTreinamento.ContasAlcancadas),
                    "AtividadeEncoded"))
                .Append(GetTrainer(mlContext, selectedAlgoritmo));

            modeloEngajamento = pipelineEngajamento.Fit(trainingDataView);

            await GerarPrevisoes();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao inicializar modelos: {ex.Message}", Severity.Error);
        }
    }

    private async Task GerarPrevisoes()
    {
        if (modeloVisualizacoes == null || modeloEngajamento == null)
        {
            await InicializarModelos();
            return;
        }

        var datasPrevisor = Enumerable.Range(0, diasPrevisao)
            .Select(i => DateTime.Now.AddDays(i))
            .ToList();

        var previsoesVisualizacoesList = new List<double>();
        var previsoesEngajamentoList = new List<double>();

        var predEngineVisualizacoes = mlContext.Model.CreatePredictionEngine<DadosTreinamento, PrevisaoML>(modeloVisualizacoes);
        var predEngineEngajamento = mlContext.Model.CreatePredictionEngine<DadosTreinamento, PrevisaoML>(modeloEngajamento);

        var mediaInteracoes = await CalcularMediaInteracoes();
        var mediaAlcance = await CalcularMediaAlcance();
        var mediaEngajamento = await CalcularMediaEngajamento();

        foreach (var data in datasPrevisor)
        {
            var dadosPrevisao = new DadosTreinamento
            {
                Interacoes = mediaInteracoes,
                ContasAlcancadas = mediaAlcance,
                ContasComEngajamento = mediaEngajamento,
                AtividadeDoPerfil = selectedRedeSocial?.ToString() ?? "Instagram"
            };

            var previsaoVis = predEngineVisualizacoes.Predict(dadosPrevisao);
            var previsaoEng = predEngineEngajamento.Predict(dadosPrevisao);

            previsoesVisualizacoesList.Add(Math.Max(0, previsaoVis.Previsao));
            previsoesEngajamentoList.Add(Math.Max(0, Math.Min(1, previsaoEng.Previsao / mediaAlcance)));
        }

        previsaoVisualizacoes = previsoesVisualizacoesList.Average();
        previsaoEngajamento = previsoesEngajamentoList.Average();
        previsaoConversoes = previsaoVisualizacoes * await CalcularTaxaConversaoMedia();
        roiPrevisto = CalcularROIPrevisto(previsaoConversoes);

        AtualizarNiveisConfianca();
        AtualizarGraficos(previsoesVisualizacoesList, previsoesEngajamentoList, datasPrevisor);
        AtualizarPrevisoesDetalhadas(previsoesVisualizacoesList, previsoesEngajamentoList, datasPrevisor);

        StateHasChanged();
    }

    private void AtualizarGraficos(List<double> previsoesVisualizacoes, List<double> previsoesEngajamento, List<DateTime> datas)
    {
        seriesPrevisaoEngajamento = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Engajamento Previsto",
                Data = previsoesEngajamento.Select(v => v * 100).ToArray()
            }
        };

        seriesPrevisaoVisualizacoes = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Visualizações Previstas",
                Data = previsoesVisualizacoes.ToArray()
            }
        };

        labelsPrevisao = datas.Select(d => d.ToString("dd/MM")).ToArray();
    }

    private void AtualizarPrevisoesDetalhadas(List<double> previsoesVisualizacoes, List<double> previsoesEngajamento, List<DateTime> datas)
    {
        previsoesDetalhadas = new List<PrevisaoDetalhada>
        {
            new PrevisaoDetalhada
            {
                Periodo = "Próximos 7 dias",
                Metrica = "Visualizações",
                ValorPrevisto = previsoesVisualizacoes.Take(7).Average().ToString("N0"),
                IntervaloConfianca = $"±{(1 - confiancaVisualizacoes):P1}",
                Tendencia = CalcularTendencia(previsoesVisualizacoes.Take(7).ToList())
            },
            new PrevisaoDetalhada
            {
                Periodo = "Próximos 7 dias",
                Metrica = "Engajamento",
                ValorPrevisto = previsoesEngajamento.Take(7).Average().ToString("P2"),
                IntervaloConfianca = $"±{(1 - confiancaEngajamento):P1}",
                Tendencia = CalcularTendencia(previsoesEngajamento.Take(7).ToList())
            },
            new PrevisaoDetalhada
            {
                Periodo = "Próximo mês",
                Metrica = "Conversões",
                ValorPrevisto = previsaoConversoes.ToString("N0"),
                IntervaloConfianca = $"±{(1 - confiancaConversoes):P1}",
                Tendencia = CalcularTendencia(previsoesVisualizacoes)
            }
        };
    }

    private double CalcularTendencia(List<double> valores)
    {
        if (valores.Count < 2) return 0;

        var n = valores.Count;
        var sumX = Enumerable.Range(0, n).Sum();
        var sumY = valores.Sum();
        var sumXY = Enumerable.Range(0, n).Zip(valores, (x, y) => x * y).Sum();
        var sumXX = Enumerable.Range(0, n).Select(x => x * x).Sum();

        var slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
        return slope / valores.Average();
    }

    private async Task<float> CalcularMediaInteracoes()
    {
        if (!historicalInsights.Any()) return 0;

        var insightsRelevantes = await FiltrarInsightsRelevantes();

        if (!insightsRelevantes.Any()) return 0;

        return (float)insightsRelevantes
            .Average(i => i.Interacoes + i.Curtidas + i.Compartilhamentos + i.Respostas);
    }

    private async Task<float> CalcularMediaAlcance()
    {
        if (!historicalInsights.Any()) return 0;

        var insightsRelevantes = await FiltrarInsightsRelevantes();

        if (!insightsRelevantes.Any()) return 0;

        return (float)insightsRelevantes
            .Average(i => i.ContasAlcancadas + i.AlcanceSeguidores + i.AlcanceNaoSeguidores);
    }

    private async Task<float> CalcularMediaEngajamento()
    {
        if (!historicalInsights.Any()) return 0;

        var insightsRelevantes = await FiltrarInsightsRelevantes();

        if (!insightsRelevantes.Any()) return 0;

        var mediaEngajamento = insightsRelevantes
            .Average(i => {
                var totalInteracoes = i.Interacoes + i.Curtidas + i.Compartilhamentos + i.Respostas;
                var alcanceTotal = i.ContasAlcancadas > 0 ? i.ContasAlcancadas : 1;
                return (double)totalInteracoes / alcanceTotal;
            });

        return (float)mediaEngajamento;
    }

    private async Task<double> CalcularTaxaConversaoMedia()
    {
        if (!historicalInsights.Any()) return 0;

        var insightsRelevantes = await FiltrarInsightsRelevantes();

        if (!insightsRelevantes.Any()) return 0;

        var mediaConversao = insightsRelevantes
            .Average(i => {
                var alcanceTotal = i.ContasAlcancadas > 0 ? i.ContasAlcancadas : 1;
                var engajamentoTotal = i.ContasComEngajamento;
                return (double)engajamentoTotal / alcanceTotal;
            });

        return mediaConversao;
    }

    private async Task<List<Insight>> FiltrarInsightsRelevantes()
    {
        InsightService servicoInsights = new();
        var insights = await servicoInsights.GetInsights();

        if (selectedCampanha != null)
        {
            insights = insights.Where(i => i.ID_Campanha == selectedCampanha.Id).ToList();
        }

        if (selectedInfluencer != null)
        {
            insights = insights.Where(i => i.ID_Influencer == selectedInfluencer.ID).ToList();
        }

        if (selectedRedeSocial.HasValue)
        {
            insights = insights.Where(i => i.AtividadeDoPerfil == selectedRedeSocial.Value).ToList();
        }

        return insights;
    }

    private double CalcularROIPrevisto(double conversoes)
    {
        if(selectedCampanha == null)
        {
            Snackbar.Add("Erro ao selecionar campanha..");
            return 0;
        }
        if (selectedCampanha?.TotalInvestimento <= 0) return 0;

        var valorMedioConversao = 100; // Valor médio estimado por conversão
        var receitaPrevista = conversoes * valorMedioConversao;
        var investimento = (double)selectedCampanha.TotalInvestimento;

        return ((receitaPrevista - investimento) / investimento) * 100;
    }

    private async Task AtualizarNiveisConfianca()
    {
        var insightsRelevantes = await FiltrarInsightsRelevantes();
        
        if (!insightsRelevantes.Any())
        {
            confiancaVisualizacoes = 0.5;
            confiancaEngajamento = 0.5;
            confiancaConversoes = 0.5;
            confiancaROI = 0.5;
            return;
        }

        var varianciaVisualizacoes = CalcularVariancia(insightsRelevantes.Select(i => (double)i.Visualizacoes));
        var varianciaEngajamento = CalcularVariancia(insightsRelevantes.Select(i => (double)i.ContasComEngajamento));

        confiancaVisualizacoes = NormalizarConfianca(varianciaVisualizacoes);
        confiancaEngajamento = NormalizarConfianca(varianciaEngajamento);
        confiancaConversoes = confiancaEngajamento * 0.9;
        confiancaROI = confiancaConversoes * 0.9;
    }

    private double CalcularVariancia(IEnumerable<double> valores)
    {
        var media = valores.Average();
        var somaDiferencasQuadradas = valores.Sum(v => Math.Pow(v - media, 2));
        return somaDiferencasQuadradas / valores.Count();
    }

    private double NormalizarConfianca(double variancia)
    {
        var confiancaBase = 1 / (1 + Math.Log10(1 + variancia));
        return 0.5 + (confiancaBase * 0.45);
    }

    private async Task<List<Insight>> CarregarDadosTreinamento()
    {
        return await FiltrarInsightsRelevantes();
    }

    private async Task OnCampanhaSelected(Me2CampanhaModelo campanha)
    {
        selectedCampanha = campanha;
        selectedInfluencer = null;
        await CarregarDados();
        await GerarPrevisoes();
    }

    private async Task OnInfluencerSelected(InfluencerModel influencer)
    {
        selectedInfluencer = influencer;
        await GerarPrevisoes();
    }

    private async Task OnRedeSocialSelected(TipoRedeSocial? redeSocial)
    {
        selectedRedeSocial = redeSocial;
        await GerarPrevisoes();
    }

    private async Task TreinarModelo()
    {
        await InicializarModelos();
        await GerarPrevisoes();
        Snackbar.Add("Modelo treinado com sucesso!", Severity.Success);
    }

    public async Task VerificarLogin()
    {
        try
        {
            storedEmail = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userEmail");
            if (!string.IsNullOrEmpty(storedEmail))
            {
                dadosSessaoUsuario = await UserService.GetUserByEmail(storedEmail);
                if (dadosSessaoUsuario == null)
                    NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao recuperar o email: {ex.Message}");
        }
    }

    public string storedEmail { get; set; }
    public AuthUserModel dadosSessaoUsuario { get; set; }

    private async Task CarregarDados()
    {
        var campanhaService = new Me2CampanhaService();
        campanhas = await campanhaService.GetCampanhasByEmpresaId(dadosSessaoUsuario.Id);

        if (selectedCampanha != null)
        {
            var influencerService = new InfluencerFormService();
            influencers = await influencerService.GetInfluencersByCampaignIdAsync(selectedCampanha.Id);
        }
    }
}